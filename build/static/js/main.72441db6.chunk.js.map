{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Filter","value","onChange","PersonForm","handleSubmit","personName","personNumber","handleNameChange","handleNumberChange","onSubmit","type","Persons","persons","remove","map","person","name","number","onClick","id","Notification","message","style","className","baseUrl","axios","get","then","response","data","newPerson","post","put","delete","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","notificationMessage","setNotificationMessage","notificationStyle","setNotificationStyle","filteredPersons","toLowerCase","includes","useEffect","personService","initialPersons","addPerson","concat","handleNotification","catch","error","updatePerson","oldPerson","updatedPerson","color","setTimeout","event","target","preventDefault","addedPerson","find","newPersonObject","window","confirm","n","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72441db6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({ value, onChange }) => (\n  <>\n    filter with <input value={value} onChange={onChange} />\n  </>\n);\nexport default Filter;\n","import React from 'react';\n\nconst PersonForm = ({\n  handleSubmit,\n  personName,\n  personNumber,\n  handleNameChange,\n  handleNumberChange,\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        name: <input value={personName} onChange={handleNameChange} />\n      </div>\n      <div>\n        number: <input value={personNumber} onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from 'react';\n\nconst Persons = ({ persons, remove }) => {\n  return (\n    <>\n      {persons.map((person) => (\n        <div key={person.id}>\n          {person.name} {person.number}{' '}\n          <button onClick={() => remove(person.id)}>delete</button>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default Persons;\n","import React from 'react';\n\nconst Notification = ({ message, style }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return (\n    <div className=\"notification\" style={style}>\n      {message}\n    </div>\n  );\n};\n\nexport default Notification;\n","import axios from 'axios';\nconst baseUrl = 'api/persons';\n\nconst getAll = () => {\n  return axios.get(baseUrl).then((response) => response.data);\n};\n\nconst create = (newPerson) => {\n  return axios.post(baseUrl, newPerson).then((response) => response.data);\n};\n\nconst update = (id, newPerson) => {\n  return axios\n    .put(`${baseUrl}/${id}`, newPerson)\n    .then((response) => response.data);\n};\n\nconst remove = (id) => {\n  return axios.delete(`${baseUrl}/${id}`).then((response) => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n  remove,\n};\n","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\nimport personService from './services/persons';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [notificationMessage, setNotificationMessage] = useState(null);\n  const [notificationStyle, setNotificationStyle] = useState({});\n\n  const isFiltered = (person) =>\n    person.name.toLowerCase().includes(filter.toLowerCase());\n\n  const filteredPersons = persons.filter(isFiltered);\n\n  const getPersons = () => {\n    personService.getAll().then((initialPersons) => {\n      setPersons(initialPersons);\n    });\n  };\n\n  useEffect(getPersons, []);\n\n  const handlePersonSubmit = (event) => {\n    event.preventDefault();\n\n    const addedPerson = persons.find((person) => person.name === newName);\n    const newPersonObject = {\n      name: newName,\n      number: newNumber,\n    };\n\n    if (\n      addedPerson &&\n      window.confirm(\n        `${addedPerson.name} is already added to phonebook, replace the old number with new one?`\n      )\n    ) {\n      updatePerson(addedPerson, newPersonObject);\n    } else if (!addedPerson) {\n      addPerson(newPersonObject);\n    }\n  };\n\n  const addPerson = (person) => {\n    personService\n      .create(person)\n      .then((newPerson) => {\n        setPersons(persons.concat(newPerson));\n        setNewName('');\n        setNewNumber('');\n\n        const message = `Added ${newPerson.name}`;\n        handleNotification(message, 'green');\n      })\n      .catch((error) => {\n        handleNotification(error.response.data.error, 'red');\n      });\n  };\n\n  const updatePerson = (oldPerson, newPerson) => {\n    personService\n      .update(oldPerson.id, newPerson)\n      .then((updatedPerson) =>\n        setPersons(\n          persons.map((person) =>\n            person.id !== oldPerson.id ? person : updatedPerson\n          )\n        )\n      )\n      .catch((error) => {\n        handleNotification(error.response.data.error, 'red');\n      });\n  };\n\n  const removePerson = (id) => {\n    if (\n      window.confirm(\n        `Delete ${persons.find((person) => person.id === id).name}?`\n      )\n    ) {\n      personService\n        .remove(id)\n        .then(() => setPersons(persons.filter((n) => n.id !== id)));\n    }\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value);\n  };\n\n  const handleNotification = (message, color) => {\n    setNotificationMessage(message);\n    setNotificationStyle({\n      color,\n    });\n    setTimeout(() => {\n      setNotificationMessage(null);\n    }, 5000);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} style={notificationStyle} />\n\n      <Filter value={filter} onChange={handleFilterChange} />\n\n      <h3>Add new</h3>\n\n      <PersonForm\n        handleSubmit={handlePersonSubmit}\n        personName={newName}\n        personNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n\n      <h3>Numbers</h3>\n\n      <Persons persons={filteredPersons} remove={removePerson} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}